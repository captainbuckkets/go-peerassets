// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/protobuf.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Modes for asset issuance
type DeckSpawn_MODE int32

const (
	DeckSpawn_NONE        DeckSpawn_MODE = 0
	DeckSpawn_CUSTOM      DeckSpawn_MODE = 1
	DeckSpawn_ONCE        DeckSpawn_MODE = 2
	DeckSpawn_MULTI       DeckSpawn_MODE = 4
	DeckSpawn_MONO        DeckSpawn_MODE = 8
	DeckSpawn_UNFLUSHABLE DeckSpawn_MODE = 16
	// 0x20 used by SUBSCRIPTION (0x34 = 0x20 | 0x04 | 0x10)
	DeckSpawn_SUBSCRIPTION DeckSpawn_MODE = 52
	// Where X is the asset balance of the address.
	// This mode automatically enables MULTI & UNFLUSHABLE (0x34 = 0x20 | 0x04 | 0x10)
	// SINGLET is a combination of ONCE and MONO (0x02 | 0x08)
	DeckSpawn_SINGLET DeckSpawn_MODE = 10
)

var DeckSpawn_MODE_name = map[int32]string{
	0:  "NONE",
	1:  "CUSTOM",
	2:  "ONCE",
	4:  "MULTI",
	8:  "MONO",
	16: "UNFLUSHABLE",
	52: "SUBSCRIPTION",
	10: "SINGLET",
}

var DeckSpawn_MODE_value = map[string]int32{
	"NONE":         0,
	"CUSTOM":       1,
	"ONCE":         2,
	"MULTI":        4,
	"MONO":         8,
	"UNFLUSHABLE":  16,
	"SUBSCRIPTION": 52,
	"SINGLET":      10,
}

func (x DeckSpawn_MODE) String() string {
	return proto.EnumName(DeckSpawn_MODE_name, int32(x))
}

func (DeckSpawn_MODE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac732507fd34a3d2, []int{0, 0}
}

// Meta-data message for the deck spawn transaction
type DeckSpawn struct {
	// Protocol version number
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Name for the registered asset
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Number of decimals to define how much an asset can divided
	NumberOfDecimals int32 `protobuf:"varint,3,opt,name=number_of_decimals,json=numberOfDecimals,proto3" json:"number_of_decimals,omitempty"`
	IssueMode        int32 `protobuf:"varint,4,opt,name=issue_mode,json=issueMode,proto3" json:"issue_mode,omitempty"`
	// Free form asset specific data (optional)
	AssetSpecificData []byte `protobuf:"bytes,5,opt,name=asset_specific_data,json=assetSpecificData,proto3" json:"asset_specific_data,omitempty"`
	// card transaction fee (optional)
	// token amount to be burned upon each card transfer
	// to be encoded as: fee * 10**number_of_decimals
	// defaults to zero
	Fee                  int32    `protobuf:"varint,6,opt,name=fee,proto3" json:"fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeckSpawn) Reset()         { *m = DeckSpawn{} }
func (m *DeckSpawn) String() string { return proto.CompactTextString(m) }
func (*DeckSpawn) ProtoMessage()    {}
func (*DeckSpawn) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac732507fd34a3d2, []int{0}
}

func (m *DeckSpawn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeckSpawn.Unmarshal(m, b)
}
func (m *DeckSpawn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeckSpawn.Marshal(b, m, deterministic)
}
func (m *DeckSpawn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeckSpawn.Merge(m, src)
}
func (m *DeckSpawn) XXX_Size() int {
	return xxx_messageInfo_DeckSpawn.Size(m)
}
func (m *DeckSpawn) XXX_DiscardUnknown() {
	xxx_messageInfo_DeckSpawn.DiscardUnknown(m)
}

var xxx_messageInfo_DeckSpawn proto.InternalMessageInfo

func (m *DeckSpawn) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DeckSpawn) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeckSpawn) GetNumberOfDecimals() int32 {
	if m != nil {
		return m.NumberOfDecimals
	}
	return 0
}

func (m *DeckSpawn) GetIssueMode() int32 {
	if m != nil {
		return m.IssueMode
	}
	return 0
}

func (m *DeckSpawn) GetAssetSpecificData() []byte {
	if m != nil {
		return m.AssetSpecificData
	}
	return nil
}

func (m *DeckSpawn) GetFee() int32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

// Transaction data for:
// - Card transfer transaction
// - Card issue transaction
// - Card burn transaction
type CardTransfer struct {
	// Protocol version number
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Amount to transfer
	Amount []int64 `protobuf:"varint,2,rep,packed,name=amount,proto3" json:"amount,omitempty"`
	// Number of decimals
	// Should be equal to the number specified in the deck spawn transaction.
	// Encoded in this message for easy validation
	NumberOfDecimals int32 `protobuf:"varint,3,opt,name=number_of_decimals,json=numberOfDecimals,proto3" json:"number_of_decimals,omitempty"`
	// Free form asset specific data (optional)
	AssetSpecificData []byte `protobuf:"bytes,4,opt,name=asset_specific_data,json=assetSpecificData,proto3" json:"asset_specific_data,omitempty"`
	DeckId            string `protobuf:"bytes,5,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
	// Transaction ID
	CardId   string   `protobuf:"bytes,6,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Sender   string   `protobuf:"bytes,7,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver []string `protobuf:"bytes,8,rep,name=receiver,proto3" json:"receiver,omitempty"`
	// Block Number
	BlockHeight []int32 `protobuf:"varint,9,rep,packed,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TxIndex     []int64 `protobuf:"varint,10,rep,packed,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	// Card Index
	CardIndex            []int32  `protobuf:"varint,11,rep,packed,name=card_index,json=cardIndex,proto3" json:"card_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardTransfer) Reset()         { *m = CardTransfer{} }
func (m *CardTransfer) String() string { return proto.CompactTextString(m) }
func (*CardTransfer) ProtoMessage()    {}
func (*CardTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac732507fd34a3d2, []int{1}
}

func (m *CardTransfer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CardTransfer.Unmarshal(m, b)
}
func (m *CardTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CardTransfer.Marshal(b, m, deterministic)
}
func (m *CardTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardTransfer.Merge(m, src)
}
func (m *CardTransfer) XXX_Size() int {
	return xxx_messageInfo_CardTransfer.Size(m)
}
func (m *CardTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_CardTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_CardTransfer proto.InternalMessageInfo

func (m *CardTransfer) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CardTransfer) GetAmount() []int64 {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *CardTransfer) GetNumberOfDecimals() int32 {
	if m != nil {
		return m.NumberOfDecimals
	}
	return 0
}

func (m *CardTransfer) GetAssetSpecificData() []byte {
	if m != nil {
		return m.AssetSpecificData
	}
	return nil
}

func (m *CardTransfer) GetDeckId() string {
	if m != nil {
		return m.DeckId
	}
	return ""
}

func (m *CardTransfer) GetCardId() string {
	if m != nil {
		return m.CardId
	}
	return ""
}

func (m *CardTransfer) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *CardTransfer) GetReceiver() []string {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *CardTransfer) GetBlockHeight() []int32 {
	if m != nil {
		return m.BlockHeight
	}
	return nil
}

func (m *CardTransfer) GetTxIndex() []int64 {
	if m != nil {
		return m.TxIndex
	}
	return nil
}

func (m *CardTransfer) GetCardIndex() []int32 {
	if m != nil {
		return m.CardIndex
	}
	return nil
}

func init() {
	proto.RegisterEnum("DeckSpawn_MODE", DeckSpawn_MODE_name, DeckSpawn_MODE_value)
	proto.RegisterType((*DeckSpawn)(nil), "DeckSpawn")
	proto.RegisterType((*CardTransfer)(nil), "CardTransfer")
}

func init() {
	proto.RegisterFile("protobuf/protobuf.proto", fileDescriptor_ac732507fd34a3d2)
}

var fileDescriptor_ac732507fd34a3d2 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x49, 0xec, 0xf8, 0xe7, 0x26, 0x12, 0xc3, 0x20, 0xd1, 0x01, 0x09, 0xc9, 0x64, 0xe5,
	0x05, 0x2a, 0x0b, 0x78, 0x01, 0x9a, 0x18, 0x6a, 0x29, 0xb6, 0x91, 0x7f, 0xd6, 0xd6, 0xc4, 0x73,
	0x4d, 0xad, 0xd4, 0x76, 0x34, 0x76, 0x4a, 0x5e, 0x8c, 0x07, 0xe2, 0x4d, 0xd0, 0x8c, 0x53, 0x76,
	0x45, 0xea, 0xee, 0x9c, 0xef, 0xcc, 0x1d, 0x5d, 0x1d, 0x5d, 0xb8, 0x3a, 0xca, 0x7e, 0xec, 0xf7,
	0xa7, 0xfa, 0xd3, 0xa3, 0xb8, 0xd6, 0x62, 0xfd, 0x7b, 0x0e, 0xee, 0x16, 0xab, 0x43, 0x76, 0xe4,
	0xbf, 0x3a, 0xca, 0xc0, 0x7e, 0x40, 0x39, 0x34, 0x7d, 0xc7, 0x66, 0xde, 0xcc, 0x5f, 0xa4, 0x8f,
	0x96, 0x52, 0x30, 0x3b, 0xde, 0x22, 0x9b, 0x7b, 0x33, 0xdf, 0x4d, 0xb5, 0xa6, 0x1f, 0x81, 0x76,
	0xa7, 0x76, 0x8f, 0xb2, 0xec, 0xeb, 0x52, 0x60, 0xd5, 0xb4, 0xfc, 0x7e, 0x60, 0x86, 0x1e, 0x24,
	0x53, 0x92, 0xd4, 0xdb, 0x0b, 0xa7, 0xef, 0x01, 0x9a, 0x61, 0x38, 0x61, 0xd9, 0xf6, 0x02, 0x99,
	0xa9, 0x5f, 0xb9, 0x9a, 0x44, 0xbd, 0x40, 0x7a, 0x0d, 0xaf, 0xf9, 0x30, 0xe0, 0x58, 0x0e, 0x47,
	0xac, 0x9a, 0xba, 0xa9, 0x4a, 0xc1, 0x47, 0xce, 0x16, 0xde, 0xcc, 0x5f, 0xa5, 0xaf, 0x74, 0x94,
	0x5d, 0x92, 0x2d, 0x1f, 0x39, 0x25, 0x60, 0xd4, 0x88, 0xcc, 0xd2, 0xff, 0x28, 0xb9, 0x3e, 0x80,
	0x19, 0x25, 0xdb, 0x80, 0x3a, 0x60, 0xc6, 0x49, 0x1c, 0x90, 0x17, 0x14, 0xc0, 0xda, 0x14, 0x59,
	0x9e, 0x44, 0x64, 0xa6, 0x68, 0x12, 0x6f, 0x02, 0x32, 0xa7, 0x2e, 0x2c, 0xa2, 0x62, 0x97, 0x87,
	0xc4, 0x54, 0x30, 0x4a, 0xe2, 0x84, 0x38, 0xf4, 0x25, 0x2c, 0x8b, 0xf8, 0xdb, 0xae, 0xc8, 0x6e,
	0xbf, 0xde, 0xec, 0x02, 0x42, 0x28, 0x81, 0x55, 0x56, 0xdc, 0x64, 0x9b, 0x34, 0xfc, 0x91, 0x87,
	0x49, 0x4c, 0xbe, 0xd0, 0x25, 0xd8, 0x59, 0x18, 0x7f, 0xdf, 0x05, 0x39, 0x81, 0xf5, 0x9f, 0x39,
	0xac, 0x36, 0x5c, 0x8a, 0x5c, 0xf2, 0x6e, 0xa8, 0x51, 0xfe, 0xa7, 0xba, 0x37, 0x60, 0xf1, 0xb6,
	0x3f, 0x75, 0x23, 0x9b, 0x7b, 0x86, 0x6f, 0xa4, 0x17, 0xf7, 0xcc, 0xfa, 0x9e, 0xe8, 0xc7, 0x7c,
	0xaa, 0x9f, 0x2b, 0xb0, 0x05, 0x56, 0x87, 0xb2, 0x11, 0xba, 0x43, 0x37, 0xb5, 0x94, 0x0d, 0x85,
	0x0a, 0x2a, 0x2e, 0x85, 0x0a, 0xac, 0x29, 0x50, 0x36, 0x14, 0x6a, 0xcf, 0x01, 0x3b, 0x81, 0x92,
	0xd9, 0x13, 0x9f, 0x1c, 0x7d, 0x07, 0x8e, 0xc4, 0x0a, 0x9b, 0x07, 0x94, 0xcc, 0xf1, 0x0c, 0xdf,
	0x4d, 0xff, 0x79, 0xfa, 0x01, 0x56, 0xfb, 0xfb, 0xbe, 0x3a, 0x94, 0x77, 0xd8, 0xfc, 0xbc, 0x1b,
	0x99, 0xeb, 0x19, 0xfe, 0x22, 0x5d, 0x6a, 0x76, 0xab, 0x11, 0x7d, 0x0b, 0xce, 0x78, 0x2e, 0x9b,
	0x4e, 0xe0, 0x99, 0x81, 0x2e, 0xc0, 0x1e, 0xcf, 0xa1, 0xb2, 0xea, 0x24, 0xa6, 0x55, 0x74, 0xb8,
	0xd4, 0xb3, 0xae, 0xde, 0x46, 0x81, 0xbd, 0xa5, 0x4f, 0xf4, 0xf3, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x39, 0x86, 0xb7, 0x9c, 0xbd, 0x02, 0x00, 0x00,
}
